'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { File, AlertTriangle, Code, Eye } from 'lucide-react';
import { Vulnerability } from '@/types';

interface VulnerabilityHeatmapProps {
  vulnerabilities: Vulnerability[];
}

interface FileNode {
  name: string;
  path: string;
  vulnerabilities: Vulnerability[];
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  children?: FileNode[];
}

const VulnerabilityHeatmap: React.FC<VulnerabilityHeatmapProps> = ({ vulnerabilities }) => {
  const [selectedFile, setSelectedFile] = useState<string | null>(null);
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set());

  // Mock file tree with vulnerabilities
  const fileTree: FileNode[] = [
    {
      name: 'src',
      path: 'src',
      vulnerabilities: [],
      riskLevel: 'HIGH',
      children: [
        {
          name: 'auth',
          path: 'src/auth',
          vulnerabilities: [],
          riskLevel: 'CRITICAL',
          children: [
            {
              name: 'authentication.py',
              path: 'src/auth/authentication.py',
              vulnerabilities: vulnerabilities.filter(v => v.file.includes('auth')),
              riskLevel: 'CRITICAL',
            },
            {
              name: 'permissions.py',
              path: 'src/auth/permissions.py',
              vulnerabilities: [],
              riskLevel: 'MEDIUM',
            }
          ]
        },
        {
          name: 'api',
          path: 'src/api',
          vulnerabilities: [],
          riskLevel: 'MEDIUM',
          children: [
            {
              name: 'routes.py',
              path: 'src/api/routes.py',
              vulnerabilities: [],
              riskLevel: 'LOW',
            },
            {
              name: 'models.py',
              path: 'src/api/models.py',
              vulnerabilities: [],
              riskLevel: 'MEDIUM',
            }
          ]
        },
        {
          name: 'utils',
          path: 'src/utils',
          vulnerabilities: [],
          riskLevel: 'LOW',
          children: [
            {
              name: 'helpers.py',
              path: 'src/utils/helpers.py',
              vulnerabilities: [],
              riskLevel: 'LOW',
            }
          ]
        }
      ]
    }
  ];

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'CRITICAL':
        return 'bg-cyber-red';
      case 'HIGH':
        return 'bg-red-500';
      case 'MEDIUM':
        return 'bg-cyber-orange';
      case 'LOW':
        return 'bg-yellow-500';
      default:
        return 'bg-cyber-green';
    }
  };

  const getRiskBorderColor = (level: string) => {
    switch (level) {
      case 'CRITICAL':
        return 'border-cyber-red';
      case 'HIGH':
        return 'border-red-500';
      case 'MEDIUM':
        return 'border-cyber-orange';
      case 'LOW':
        return 'border-yellow-500';
      default:
        return 'border-cyber-green';
    }
  };

  const toggleFolder = (path: string) => {
    setExpandedFolders(prev => {
      const newSet = new Set(prev);
      if (newSet.has(path)) {
        newSet.delete(path);
      } else {
        newSet.add(path);
      }
      return newSet;
    });
  };

  const renderFileNode = (node: FileNode, depth: number = 0) => {
    const isExpanded = expandedFolders.has(node.path);
    const isFile = !node.children;
    const hasVulnerabilities = node.vulnerabilities.length > 0;

    return (
      <div key={node.path} className="select-none">
        <motion.div
          className={`flex items-center space-x-2 px-2 py-1 rounded cursor-pointer transition-colors ${
            selectedFile === node.path ? 'bg-gray-700' : 'hover:bg-gray-800'
          }`}
          style={{ paddingLeft: `${depth * 20 + 8}px` }}
          onClick={() => {
            if (isFile) {
              setSelectedFile(selectedFile === node.path ? null : node.path);
            } else {
              toggleFolder(node.path);
            }
          }}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {/* Risk indicator */}
          <motion.div
            className={`w-3 h-3 rounded-sm border ${getRiskColor(node.riskLevel)} ${getRiskBorderColor(node.riskLevel)}`}
            animate={hasVulnerabilities ? {
              boxShadow: [
                `0 0 0 0 ${node.riskLevel === 'CRITICAL' ? '#ff073a' : '#ff6b35'}40`,
                `0 0 0 4px ${node.riskLevel === 'CRITICAL' ? '#ff073a' : '#ff6b35'}20`,
                `0 0 0 0 ${node.riskLevel === 'CRITICAL' ? '#ff073a' : '#ff6b35'}40`,
              ]
            } : {}}
            transition={{ duration: 1.5, repeat: Infinity }}
          />

          {/* File/folder icon */}
          {isFile ? (
            <Code className="w-4 h-4 text-gray-400" />
          ) : (
            <File className="w-4 h-4 text-gray-400" />
          )}

          {/* File name */}
          <span className="text-sm text-gray-300 flex-1">{node.name}</span>

          {/* Vulnerability count */}
          {hasVulnerabilities && (
            <motion.div
              className="flex items-center space-x-1 text-xs"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
            >
              <AlertTriangle className="w-3 h-3 text-cyber-red" />
              <span className="text-cyber-red">{node.vulnerabilities.length}</span>
            </motion.div>
          )}

          {/* Expand/collapse indicator */}
          {!isFile && (
            <motion.div
              animate={{ rotate: isExpanded ? 90 : 0 }}
              transition={{ duration: 0.2 }}
            >
              â–¶
            </motion.div>
          )}
        </motion.div>

        {/* Children */}
        {!isFile && isExpanded && node.children && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            {node.children.map(child => renderFileNode(child, depth + 1))}
          </motion.div>
        )}
      </div>
    );
  };

  const selectedFileData = selectedFile ?
    fileTree.flatMap(node => [node, ...(node.children || [])].flatMap(n => [n, ...(n.children || [])]))
           .find(node => node.path === selectedFile) : null;

  return (
    <div className="space-y-4">
      {/* Interactive file tree */}
      <div className="bg-gray-900 rounded-lg border border-gray-700 max-h-64 overflow-y-auto">
        <div className="p-3 border-b border-gray-700">
          <h4 className="text-sm font-semibold text-gray-300 flex items-center space-x-2">
            <File className="w-4 h-4" />
            <span>Project Files</span>
          </h4>
        </div>
        <div className="p-2">
          {fileTree.map(node => renderFileNode(node))}
        </div>
      </div>

      {/* File details */}
      {selectedFileData && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-gray-900 rounded-lg border border-gray-700 p-4"
        >
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <Code className="w-4 h-4 text-cyber-blue" />
              <span className="font-mono text-sm text-gray-300">{selectedFileData.name}</span>
            </div>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="flex items-center space-x-1 text-xs text-cyber-blue hover:text-blue-300"
            >
              <Eye className="w-3 h-3" />
              <span>View Code</span>
            </motion.button>
          </div>

          {selectedFileData.vulnerabilities.length > 0 ? (
            <div className="space-y-2">
              <h5 className="text-sm font-medium text-gray-300">Vulnerabilities:</h5>
              {selectedFileData.vulnerabilities.map((vuln, index) => (
                <motion.div
                  key={vuln.id}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-gray-800 rounded p-3 border-l-4 border-cyber-red"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className={`px-2 py-0.5 text-xs rounded ${
                          vuln.severity === 'CRITICAL' ? 'bg-cyber-red text-white' :
                          vuln.severity === 'HIGH' ? 'bg-red-500 text-white' :
                          vuln.severity === 'MEDIUM' ? 'bg-cyber-orange text-white' :
                          'bg-yellow-500 text-black'
                        }`}>
                          {vuln.severity}
                        </span>
                        <span className="text-xs text-gray-400">Line {vuln.line}</span>
                      </div>
                      <p className="text-sm text-gray-300 mb-1">{vuln.description}</p>
                      <p className="text-xs text-gray-400">{vuln.suggestedFix}</p>
                    </div>
                    <AlertTriangle className="w-4 h-4 text-cyber-red flex-shrink-0 mt-1" />
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            <div className="text-center py-4 text-gray-400">
              <AlertTriangle className="w-8 h-8 mx-auto mb-2 text-cyber-green" />
              <p className="text-sm">No vulnerabilities detected</p>
            </div>
          )}
        </motion.div>
      )}

      {/* Legend */}
      <div className="bg-gray-900 rounded-lg border border-gray-700 p-3">
        <h4 className="text-sm font-semibold text-gray-300 mb-2">Risk Levels</h4>
        <div className="grid grid-cols-2 gap-2 text-xs">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-cyber-red rounded"></div>
            <span>Critical</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-red-500 rounded"></div>
            <span>High</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-cyber-orange rounded"></div>
            <span>Medium</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-yellow-500 rounded"></div>
            <span>Low</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityHeatmap;
