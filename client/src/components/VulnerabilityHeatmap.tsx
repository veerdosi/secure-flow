'use client';

import React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  File,
  Folder,
  FolderOpen,
  AlertTriangle,
  Code,
  Eye,
  ChevronRight,
  ChevronDown,
  FileText,
  Database,
  Settings,
  Zap
} from 'lucide-react';
import { Vulnerability } from '@/types';

interface VulnerabilityHeatmapProps {
  vulnerabilities: Vulnerability[];
}

interface FileNode {
  name: string;
  path: string;
  type: 'file' | 'folder';
  vulnerabilities: Vulnerability[];
  riskLevel: 'SAFE' | 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  children?: FileNode[];
  extension?: string;
}

const VulnerabilityHeatmap: React.FC<VulnerabilityHeatmapProps> = ({ vulnerabilities }) => {
  const [selectedFile, setSelectedFile] = useState<string | null>(null);
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set(['src']));

  // Generate file tree dynamically from vulnerability data
  const fileTree: FileNode[] = useMemo(() => {
    if (!vulnerabilities || !Array.isArray(vulnerabilities) || vulnerabilities.length === 0) {
      return [];
    }

    try {
      // Build file tree from vulnerability file paths
      const tree: { [key: string]: FileNode } = {};
      const rootFolders = new Set<string>();

      for (const vuln of vulnerabilities) {
        if (!vuln || !vuln.file || typeof vuln.file !== 'string') continue;
        
        const pathParts = vuln.file.split('/').filter(Boolean);
        if (pathParts.length === 0) continue;

        let currentPath = '';
        let currentNode = tree;

        for (let index = 0; index < pathParts.length; index++) {
          const part = pathParts[index];
          const isFile = index === pathParts.length - 1;
          currentPath = currentPath ? `${currentPath}/${part}` : part;

          if (!currentNode[currentPath]) {
            const nodeVulns = vulnerabilities.filter(v => 
              v && v.file && (isFile ? v.file === currentPath : v.file.startsWith(currentPath + '/'))
            );
            
            const newNode: FileNode = {
              name: part,
              path: currentPath,
              type: isFile ? 'file' : 'folder',
              extension: isFile ? part.split('.').pop() : undefined,
              vulnerabilities: isFile ? nodeVulns : [],
              riskLevel: getRiskLevel(nodeVulns),
              children: isFile ? undefined : []
            };
            
            currentNode[currentPath] = newNode;

            if (index === 0) {
              rootFolders.add(currentPath);
            }
          }

          if (!isFile && currentNode[currentPath] && currentNode[currentPath].children) {
            // Move to next level for folders
            const childrenNode: { [key: string]: FileNode } = {};
            const children = currentNode[currentPath].children;
            if (children && Array.isArray(children)) {
              for (const child of children) {
                if (child && child.path) {
                  childrenNode[child.path] = child;
                }
              }
            }
            currentNode = childrenNode;
          }
        }
      }

      // Convert to array and build hierarchical structure
      const buildChildren = (parentPath: string): FileNode[] => {
        try {
          return Object.values(tree)
            .filter(node => {
              if (!node || !node.path) return false;
              const nodeDir = node.path.substring(0, node.path.lastIndexOf('/'));
              return nodeDir === parentPath;
            })
            .map(node => ({
              ...node,
              children: node.type === 'folder' ? buildChildren(node.path) : undefined
            }));
        } catch (e) {
          return [];
        }
      };

      return Array.from(rootFolders).map(rootPath => {
        const rootNode = tree[rootPath];
        if (!rootNode) return null;
        return {
          ...rootNode,
          children: rootNode.type === 'folder' ? buildChildren(rootPath) : undefined
        };
      }).filter(Boolean) as FileNode[];
    } catch (error) {
      console.warn('Error building file tree:', error);
      return [];
    }
  }, [vulnerabilities]);

  const getRiskLevel = (vulns: Vulnerability[]): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' | 'SAFE' => {
    if (!vulns || vulns.length === 0) return 'SAFE';
    
    const severities = vulns.map(v => v.severity);
    if (severities.includes('CRITICAL')) return 'CRITICAL';
    if (severities.includes('HIGH')) return 'HIGH';
    if (severities.includes('MEDIUM')) return 'MEDIUM';
    if (severities.includes('LOW')) return 'LOW';
    return 'SAFE';
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'CRITICAL':
        return 'bg-red-500';
      case 'HIGH':
        return 'bg-orange-500';
      case 'MEDIUM':
        return 'bg-yellow-500';
      case 'LOW':
        return 'bg-blue-400';
      case 'SAFE':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getRiskGlow = (level: string) => {
    switch (level) {
      case 'CRITICAL':
        return 'shadow-red-glow';
      case 'HIGH':
        return 'shadow-orange-400/30';
      case 'MEDIUM':
        return 'shadow-yellow-400/30';
      case 'LOW':
        return 'shadow-blue-400/30';
      default:
        return '';
    }
  };

  const getFileIcon = (extension?: string) => {
    switch (extension) {
      case 'py':
        return <Database className="w-4 h-4 text-blue-400" />;
      case 'tsx':
      case 'ts':
        return <Code className="w-4 h-4 text-cyan-400" />;
      case 'js':
      case 'jsx':
        return <Code className="w-4 h-4 text-yellow-400" />;
      case 'json':
        return <Settings className="w-4 h-4 text-green-400" />;
      default:
        return <FileText className="w-4 h-4 text-gray-400" />;
    }
  };

  const toggleFolder = (path: string) => {
    setExpandedFolders(prev => {
      const newSet = new Set(prev);
      if (newSet.has(path)) {
        newSet.delete(path);
      } else {
        newSet.add(path);
      }
      return newSet;
    });
  };

  const calculateFolderRisk = (node: FileNode): string => {
    if (node.type === 'file') {
      return node.riskLevel;
    }

    if (!node.children) return 'SAFE';

    const childRisks = node.children.map(child => calculateFolderRisk(child));
    if (childRisks.includes('CRITICAL')) return 'CRITICAL';
    if (childRisks.includes('HIGH')) return 'HIGH';
    if (childRisks.includes('MEDIUM')) return 'MEDIUM';
    if (childRisks.includes('LOW')) return 'LOW';
    return 'SAFE';
  };

  const renderFileNode = (node: FileNode, depth: number = 0) => {
    const isExpanded = expandedFolders.has(node.path);
    const isFile = node.type === 'file';
    const hasVulnerabilities = node.vulnerabilities.length > 0;
    const riskLevel = isFile ? node.riskLevel : calculateFolderRisk(node);

    return (
      <div key={node.path} className="select-none">
        <motion.div
          className={`flex items-center space-x-2 px-3 py-2 rounded-lg cursor-pointer transition-all duration-200 group ${
            selectedFile === node.path
              ? 'bg-cyber-blue/20 border border-cyber-blue/50'
              : 'hover:bg-dark-bg/50 hover:border hover:border-gray-600'
          } ${hasVulnerabilities ? 'border-l-4 border-l-red-500' : ''}`}
          style={{ paddingLeft: `${depth * 20 + 12}px` }}
          onClick={() => {
            if (isFile) {
              setSelectedFile(selectedFile === node.path ? null : node.path);
            } else {
              toggleFolder(node.path);
            }
          }}
          whileHover={{ scale: 1.01, x: 2 }}
          whileTap={{ scale: 0.99 }}
        >
          {/* Expand/collapse icon for folders */}
          {!isFile && (
            <motion.div
              animate={{ rotate: isExpanded ? 90 : 0 }}
              transition={{ duration: 0.2 }}
              className="text-gray-400"
            >
              <ChevronRight className="w-4 h-4" />
            </motion.div>
          )}

          {/* Risk indicator */}
          <motion.div
            className={`w-3 h-3 rounded-full ${getRiskColor(riskLevel)} ${getRiskGlow(riskLevel)}`}
            animate={hasVulnerabilities ? {
              scale: [1, 1.2, 1],
              opacity: [1, 0.7, 1]
            } : {}}
            transition={{ duration: 2, repeat: Infinity }}
          />

          {/* File/folder icon */}
          <div className="flex-shrink-0">
            {isFile ? (
              getFileIcon(node.extension)
            ) : (
              isExpanded ? (
                <FolderOpen className="w-4 h-4 text-cyber-blue" />
              ) : (
                <Folder className="w-4 h-4 text-gray-400 group-hover:text-cyber-blue transition-colors" />
              )
            )}
          </div>

          {/* File/folder name */}
          <span className={`text-sm flex-1 transition-colors ${
            isFile ? 'text-gray-300 font-mono' : 'text-white font-medium'
          } ${selectedFile === node.path ? 'text-cyber-blue' : ''}`}>
            {node.name}
          </span>

          {/* Vulnerability count */}
          {hasVulnerabilities && (
            <motion.div
              className="flex items-center space-x-1 px-2 py-1 bg-red-500/20 rounded-full border border-red-500/50"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              whileHover={{ scale: 1.05 }}
            >
              <AlertTriangle className="w-3 h-3 text-red-400" />
              <span className="text-red-400 text-xs font-bold">{node.vulnerabilities.length}</span>
            </motion.div>
          )}

          {/* Risk level badge for files */}
          {isFile && riskLevel !== 'SAFE' && (
            <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
              riskLevel === 'CRITICAL' ? 'bg-red-500/20 text-red-400 border border-red-500/50' :
              riskLevel === 'HIGH' ? 'bg-orange-500/20 text-orange-400 border border-orange-500/50' :
              riskLevel === 'MEDIUM' ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/50' :
              'bg-blue-500/20 text-blue-400 border border-blue-500/50'
            }`}>
              {riskLevel}
            </span>
          )}
        </motion.div>

        {/* Children */}
        <AnimatePresence>
          {!isFile && isExpanded && node.children && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="overflow-hidden"
            >
              {node.children.map(child => renderFileNode(child, depth + 1))}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  };

  const selectedFileData = selectedFile ? (() => {
    try {
      const findNode = (node: FileNode): FileNode[] => {
        if (!node) return [];
        const result = [node];
        if (node.children && Array.isArray(node.children)) {
          for (const child of node.children) {
            result.push(...findNode(child));
          }
        }
        return result;
      };
      
      const allNodes = fileTree.flatMap(findNode);
      return allNodes.find(node => node && node.path === selectedFile) || null;
    } catch (error) {
      return null;
    }
  })() : null;

  return (
    <div className="space-y-4">
      {/* File tree header with search */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Folder className="w-5 h-5 text-cyber-blue" />
          <h4 className="text-sm font-semibold text-white">Project Files</h4>
        </div>
        <div className="flex items-center space-x-2 text-xs text-gray-400">
          <span>Click to explore</span>
          <Eye className="w-3 h-3" />
        </div>
      </div>

      {/* Interactive file tree */}
      <div className="bg-dark-bg/30 rounded-xl border border-gray-700 overflow-hidden">
        <div className="max-h-72 overflow-y-auto scrollbar-thin p-2">
          {fileTree.map(node => renderFileNode(node))}
        </div>
      </div>

      {/* File details panel */}
      <AnimatePresence>
        {selectedFileData && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: -20, scale: 0.95 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className="bg-dark-card border border-gray-600 rounded-xl p-5"
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                {getFileIcon(selectedFileData.extension)}
                <div>
                  <span className="font-mono text-sm text-white font-medium">{selectedFileData.name}</span>
                  <p className="text-xs text-gray-400 mt-1">{selectedFileData.path}</p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <span className={`px-3 py-1 text-xs font-semibold rounded-full ${
                  selectedFileData.riskLevel === 'CRITICAL' ? 'bg-red-500/20 text-red-400 border border-red-500/50' :
                  selectedFileData.riskLevel === 'HIGH' ? 'bg-orange-500/20 text-orange-400 border border-orange-500/50' :
                  selectedFileData.riskLevel === 'MEDIUM' ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/50' :
                  selectedFileData.riskLevel === 'LOW' ? 'bg-blue-500/20 text-blue-400 border border-blue-500/50' :
                  'bg-green-500/20 text-green-400 border border-green-500/50'
                }`}>
                  {selectedFileData.riskLevel}
                </span>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center space-x-1 px-3 py-1 bg-cyber-blue/20 text-cyber-blue border border-cyber-blue/50 rounded-lg text-xs hover:bg-cyber-blue/30 transition-colors"
                >
                  <Eye className="w-3 h-3" />
                  <span>View Code</span>
                </motion.button>
              </div>
            </div>

            {selectedFileData.vulnerabilities.length > 0 ? (
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="w-4 h-4 text-red-400" />
                  <h5 className="text-sm font-medium text-red-400">
                    {selectedFileData.vulnerabilities.length} Vulnerabilit{selectedFileData.vulnerabilities.length === 1 ? 'y' : 'ies'} Found
                  </h5>
                </div>

                <div className="space-y-3 max-h-48 overflow-y-auto scrollbar-thin">
                  {selectedFileData.vulnerabilities.map((vuln, index) => (
                    <motion.div
                      key={vuln.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="bg-dark-bg/50 rounded-lg p-4 border-l-4 border-l-red-500"
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs font-bold rounded ${
                            vuln.severity === 'CRITICAL' ? 'bg-red-500 text-white' :
                            vuln.severity === 'HIGH' ? 'bg-orange-500 text-white' :
                            vuln.severity === 'MEDIUM' ? 'bg-yellow-500 text-black' :
                            'bg-blue-500 text-white'
                          }`}>
                            {vuln.severity}
                          </span>
                          <span className="text-xs text-gray-400 flex items-center">
                            <Code className="w-3 h-3 mr-1" />
                            Line {vuln.line}
                          </span>
                        </div>
                        <Zap className="w-4 h-4 text-yellow-400 flex-shrink-0" />
                      </div>

                      <p className="text-sm text-gray-300 mb-2 leading-relaxed">{vuln.description}</p>

                      {vuln.suggestedFix && (
                        <div className="bg-green-500/10 border border-green-500/30 rounded p-2 mt-2">
                          <p className="text-xs text-green-400 font-medium mb-1">Suggested Fix:</p>
                          <p className="text-xs text-gray-300">{vuln.suggestedFix}</p>
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="text-center py-6">
                <motion.div
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  className="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3"
                >
                  <AlertTriangle className="w-6 h-6 text-green-400" />
                </motion.div>
                <p className="text-sm text-green-400 font-medium">No vulnerabilities detected</p>
                <p className="text-xs text-gray-400 mt-1">This file appears to be secure</p>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VulnerabilityHeatmap;
